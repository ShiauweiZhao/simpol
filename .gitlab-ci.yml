###################
#     Stages      #
###################

stages:          
  - test 
  - release

####################
#     Headers      #
####################
include:
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

####################
# Global Variables #
####################
variables:
  GIT_STRATEGY: fetch
  MATLAB_VERSION: 2019b
  MATLAB: matlab -batch
  MATLAB_WIN: "C:/Program Files/MATLAB/R$MATLAB_VERSION/bin/matlab.exe"
  NEED_X11: "false"

# Defind supported versions here
.supported_versions: &supported_versions
  parallel:
    matrix:
      - MATLAB_VERSION: [2019b, 2021b]

.install_simpol_linux: &install_simpol_linux
  - |
    sudo chown $(id -u):$(id -g) /usr/local/MATLAB/defaultMatlab/toolbox/local/pathdef.m
    $MATLAB "disp(version); run simpol/install_simpol"
    
.uninstall_simpol_windows: &uninstall_simpol_windows
  - '& $env:MATLAB_WIN -batch "
    if any(strfind(path,''simpol''));
       run simpol/uninstall_simpol.m;
    end;"'

.install_simpol_windows: &install_simpol_windows
  - *uninstall_simpol_windows
  - '& $env:MATLAB_WIN -batch "disp(version); run simpol/install_simpol"'

# a docker job that runs Matlab on Linux
.matlab:linux:
  tags: ["docker", "linux"]
  image: gitlab.lrz.de:5005/tulrfsd/common/docker-matlab/matlab:R${MATLAB_VERSION}_CI
  before_script:
    - *install_simpol_linux
    - if [ "$NEED_X11" = "true" ]; then
         sudo apt update && sudo apt install -y xvfb;
         export MATLAB="xvfb-run matlab -batch";
      fi

# a docker job that runs Matlab on Windows
.matlab:windows:
  tags: ["windows"]
  before_script:
    - *install_simpol_windows
  after_script:
    - *uninstall_simpol_windows

# rules
.basic_rules: &basic_rules
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  - when: manual
    allow_failure: true

# a Matlab task in the 'test' stage in Linux
.test:linux:
  extends: .matlab:linux
  stage: test
  <<: *supported_versions
  rules:
    - *basic_rules

# a Matlab task in the 'test' stage in Windows
.test:windows:
  extends: .matlab:windows
  stage: test
  <<: *supported_versions
  rules:
    - *basic_rules

# jobs
.test_class:linux:
  extends: .test:linux
  variables:
    TEST_CLASS: CLASS_TO_TEST
  script:
    - $MATLAB "
      addpath('tests/');
      result = runtests('${TEST_CLASS}');
      disp(table(result));
      exit(any(~[result.Passed]))"

.test_class:windows:
  extends: .test:windows
  variables:
    TEST_CLASS: CLASS_TO_TEST
  script:
    - '& $env:MATLAB_WIN -batch "
      addpath(''tests/'');
      result = runtests(''$env:TEST_CLASS'');
      disp(table(result));
      exit(any(~[result.Passed]))"'

.test_dir:linux:
  extends: .test:linux
  variables:
    TEST_DIR: DIR_TO_TEST
  script:
    - $MATLAB "
      result = runtests('$TEST_DIR','IncludeSubfolders',false);
      disp(table(result));
      exit(any(~[result.Passed]))"

.test_dir:windows:
  extends: .test:windows
  variables:
    TEST_DIR: DIR_TO_TEST
  script:
    - '& $env:MATLAB_WIN -batch "
      result = runtests(''$env:TEST_DIR'');
      disp(table(result));
      exit(any(~[result.Passed]))"'

####################
#       Jobs       #
####################

# ----------------------------------------------------------------------
# Basic tests
#   These tests are basic and should pass for all commits on master
# ----------------------------------------------------------------------
test:basic:linux:
  extends: .test_dir:linux
  variables:
    TEST_DIR: tests

test:basic:windows:
  extends: .test_dir:windows
  variables:
    TEST_DIR: tests

# ---------------------------------------------------------------------
# Test class - test single class
#   description to test class
# ----------------------------------------------------------------------
#testName:linux:
#  extends: .test_class:linux
#  variables:
#    TEST_CLASS: className
#
#testName:windows:
#  extends: .test_class:windows
#  variables:
#    TEST_CLASS: className

# ---------------------------------------------------------------------
# Polarion tests
#   Test with dummy Polarion server
# ----------------------------------------------------------------------
Polarion:SurrogateLinking:linux:
  extends: .test:linux
  variables:
    NEED_X11: "true"
  script:
    - $MATLAB "
        addpath('tests/polarion/');
        result = runtSurrogateLinking(
                   '$POLARION_URL',
                   '$POLARION_PROJECT',
                   '$POLARION_USER',
                   '$POLARION_PASS');
        disp(table(result));
        exit(any(~[result.Passed]))"

Polarion:DirectLinking:linux:
  extends: .test:linux
  variables:
    NEED_X11: "true"
  script:
    - $MATLAB "
        addpath('tests/polarion/');
        result = runtDirectLinking(
                   '$POLARION_URL',
                   '$POLARION_PROJECT',
                   '$POLARION_USER',
                   '$POLARION_PASS');
        disp(table(result));
        exit(any(~[result.Passed]))"

Polarion:SurrogateLinking:windows:
  extends: .test:windows
  script:
    - '& $env:MATLAB_WIN -batch "
        addpath(''tests/polarion'');
        result = runtSurrogateLinking(
                   ''$env:POLARION_URL'',
                   ''$env:POLARION_PROJECT'',
                   ''$env:POLARION_USER'',
                   ''$env:POLARION_PASS'');
        disp(table(result));
        exit(any(~[result.Passed]))"'

Polarion:DirectLinking:windows:
  extends: .test:windows
  script:
    - '& $env:MATLAB_WIN -batch "
        addpath(''tests/polarion'');
        result = runtDirectLinking(
                   ''$env:POLARION_URL'',
                   ''$env:POLARION_PROJECT'',
                   ''$env:POLARION_USER'',
                   ''$env:POLARION_PASS'');
        disp(table(result));
        exit(any(~[result.Passed]))"'
        
release:
  tags: ["docker", "linux"] 
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  variables:
    ZIP_NAME_PREFIX: simpol
    TAR_NAME_PREFIX: simpol
  before_script:
    - apk update -q && apk add -q curl zip git tar
    # PACKAGE_VERSION is number-only, e.g. 1.2.3
    - PACKAGE_VERSION=$(echo ${CI_COMMIT_TAG} | sed -n 's/^v\([0-9]\+\.[0-9]\+\.\?[0-9]*\).*/\1/p')
    - RELEASE_TAR_NAME="${TAR_NAME_PREFIX}-${PACKAGE_VERSION}.tar.gz"
    - RELEASE_ZIP_NAME="${ZIP_NAME_PREFIX}-${PACKAGE_VERSION}.zip"
    - PACKAGE_REGISTRY_ZIP_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${ZIP_NAME_PREFIX}/${PACKAGE_VERSION}/"
    - PACKAGE_REGISTRY_TAR_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${TAR_NAME_PREFIX}/${PACKAGE_VERSION}/"
    - RELEASE_DIR=.release
    - TAG_TYPE=$(git cat-file -t ${CI_COMMIT_TAG})
    - |
      if [ ${TAG_TYPE} = "tag" ]; then
        TAG_MESSAGE=$(git tag -l --format='%(contents)' ${CI_COMMIT_TAG});
      fi
    - |
      if [ -z ${TAG_MESSAGE:+x} ]; then 
        TAG_MESSAGE="There is no release message";
      fi
  script:
    - echo "Release triggered by tag $CI_COMMIT_TAG"
    - mkdir ${RELEASE_DIR}
    - echo "${PACKAGE_VERSION}-${CI_COMMIT_SHA:0:8}" > simpol/simpol-version.m
    - tar -zcvf ${RELEASE_DIR}/${RELEASE_TAR_NAME} --exclude='./.git' --exclude='.git*' --exclude="${RELEASE_DIR}" ./ 
    - zip -rq ${RELEASE_DIR}/${RELEASE_ZIP_NAME} ./ -x *.git/\* *.git\* ${RELEASE_DIR}/\*
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${RELEASE_DIR}/${RELEASE_ZIP_NAME} ${PACKAGE_REGISTRY_ZIP_URL}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${RELEASE_DIR}/${RELEASE_TAR_NAME} ${PACKAGE_REGISTRY_TAR_URL}
    - |
      release-cli create \
        --name "Release $CI_COMMIT_TAG" \
        --tag-name "$CI_COMMIT_TAG" \
        --description "${TAG_MESSAGE}" \
        --assets-link "{\"name\":\"${RELEASE_ZIP_NAME}\",\"url\":\"${PACKAGE_REGISTRY_ZIP_URL}/${RELEASE_ZIP_NAME}\"}" \
        --assets-link "{\"name\":\"${RELEASE_TAR_NAME}\",\"url\":\"${PACKAGE_REGISTRY_TAR_URL}/${RELEASE_TAR_NAME}\"}"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^[vV]\d+\.\d+.*/'
      when: manual        
